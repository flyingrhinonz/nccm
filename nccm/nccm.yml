---
# Servers configuration file in YAML format.
#
# This connections & config file is loaded from one of the following paths,
#   in the following order - whichever is found first:
#
#   ~/.config/nccm/nccm.yml
#   ~/.nccm.yml
#   ~/nccm.yml
#   /etc/nccm.yml
#
# For each connection, use the following format:
#   FRIENDLY_NAME:
#     user: USER_NAME
#     address: SERVER_ADDRESS
#     port: SERVER_PORT
#     comment: FREETEXT_COMMENT
#     keepalive: KEEPALIVE_TIME
#     identity: IDENTITY_FILE
#     customargs: CUSTOM_ARGS
#
#   Details:
#       FRIENDLY_NAME (mandatory field). Can be any of:
#         Freetext descriptive name:
#         user@server:
#         server:
#       USER_NAME - Your login name (optional field).
#       SERVER_ADDRESS - Hostname or IP address (optional field).
#       SERVER_PORT - Override the default ssh port 22 with a port number
#         you supply here (optional field). Defaults to 22 if not supplied.
#       FREETEXT_COMMENT - Any freetext you like to store as a comment on
#         this connection (optional field).
#       KEEPALIVE_TIME - Override the default nccm_config_keepalive with
#         this value (optional field).
#         Value is in seconds. Use 0 to disable sending keepalive messages
#         for this connection.
#       IDENTITY_FILE - Override the default nccm_config_identity with
#         this path (optional field).
#       CUSTOM_ARGS - Any custom arguments you want to send to ssh that
#         are not currently supported in nccm. These will be appended to
#         the end of the ssh command at connection time (optional field).
#
# You can supply FRIENDLY_NAME as:
#   1.  Descriptive text - this is just a descriptive freetext name and
#       the real username & servername will be read from their own fields.
#       This is the default state and nccm will always prefer taking the
#       username & servername from their dedicated fields if supplied.
#
#   2. user@server:
#       Use this format if you don't want to supply any of the details
#       fields as in these examples (don't indent). The username &
#       servername will be decoded from this line:
#         root@10.10.1.1:
#         user@example2.com:
#
#   3.  servername:
#         It's also possible to supply only the server address without
#         username. In this case nccm will read your currently logged in
#         user name and use that as the ssh login name (don't indent).
#         This will also append: [user@ from login user] to the comment text:
#           myserver:
#           192.168.1.1:
#
#
# Once you're done editing this file, verify it as follows:
#   yamllint nccm.yaml
#
# The "code lines" (those that actually carry the config) must adhere
#   to the yaml structure (proper indentation, etc).
#   A mistake here is wrong and will probably cause nccm to give an
#   error message.
#   yamllint is also very fussy about line lengths (80 chars max),
#   comment indents, no blank lines at the end of the file, etc.
#   These are less important and nccm handles them ok, but best to stick
#   to the yaml structure and keep yamllint happy...


# nccm internal configs:

nccm_config_controlmode: std
# ^ Supported values: std, focus
#   std - arrow keys behave as expected when browsing the list.
#   focus - list moves while your selected line stays in focus.

nccm_config_loglevel: info
# ^ Supported values: debug, info, warning, error, critical
#   Keep this at:  info  for general use and increase to:  debug  if you
#   need to troubleshoot any problems.

nccm_config_logprivateinfo: false
# ^ Do you want syslog to include private information such as usernames
#   and hostnames? Passwords will never be logged regardless of setting.
#   Setting this to:  false  results in these items being replaced
#   with "CENSORED" in syslog/journal.
#   Supported values: true, false
#   When set to:  true  you will see:  LogPrv  in the ncmm status line.

nccm_config_keepalive: 30
# ^ Send keepalive every n seconds (0 to disable) to prevent disconnection.
#   Supported values: 0 to any integer

nccm_default_ssh_port: 22
# ^ If the setting:  nccm_force_default_ssh_port == true  , this port
#   number will be forced unless a per-connection port value is supplied.
#   Supported values: any valid port number. Default 22.

nccm_force_default_ssh_port: false
# ^ If true, the port value specified in:  nccm_default_ssh_port  will
#   be forced on your connection unless a per-connection port is supplied
#   in the connection config  (port: SERVER_PORT) .
#   If false, your ssh system defaults will apply and nccm will not force
#   a change in any way.
#   Supported values: true, false

nccm_config_identity: false
# ^ For public key authentication, normally ssh will load your private key
#   from the default locations. You can force ssh to use your own file by
#   putting it's path here. Or set to false to let ssh do it's own thing.
#   Use lowercase false - otherwise yamllint will complain.
#   Supported values: true, false

nccm_config_sshprogram: ssh
# ^ The name or path to your ssh command. You can use this to explicitly
#   state the path of your ssh program, or even use a different program that
#   does the ssh (maybe you have a script or wrapper...).
#   Supported values: ssh or any valid path

nccm_config_promptuser: false
# ^ Prompt user to press Enter before nccm makes the ssh connection to
#   the server and upon disconnection from the server (set to true).
#   This may be useful in some cases, especially if you need to resize
#   your window outside of nccm, if you want to double check you're
#   connecting to the correct server, or if you need to copy text before
#   session control returns to nccm.
#   Supported values: true, false

nccm_config_importnccmd: true
# ^ Should nccm try to import whatever yml files exist in /etc/nccm.d/ ?
#   This is helpful in a multiuser env where each user can have their own
#   nccm.yml file in their home dir and still benefit from any shared
#   yml files in /etc/nccm.d/ .
#   Files in /etc/nccm.d/ should be called <name>.yml , and following
#   the same connections config format as used here but must not include
#   any program settings values - only connections details.
#   Supported values: true, false

nccm_config_logpath: false
# ^ Path to save the session log file. Set to false to disable logging.
#   Supply something like: /home/myname/nccm_logs/
#   You can use or skip the trailing slash - nccm can handle either.
#   Uses 'tee' to create a copy of the terminal output. Best to view this file
#   with 'catstep' ( get it from: https://github.com/flyingrhinonz/catstep )
#   or regular 'cat'.
#   If nccm cant find this path it will exit with an exception. The reason
#   being that it's bad if you're expecting logging to occur and it doesn't
#   happen - either fix the path or disable logging.
#   Supported values: false or any valid path.
#   When activated you will see:  LogTee  in the ncmm status line.

nccm_config_prompt_on_unknown_user: false
# ^  If there is no user specified for a connection, instead of inferring
#    the user from the currently logged in user, provide a prompt right
#    before connecting to ask for the user name you would like to log
#    in with. This can be useful for testing various logins for a connection
#    or if you do not want to provide usernames in the server list
#    Supported values: true, false

nccm_loop_nccm: false
# ^ Run nccm in a loop - when you exit out of your ssh session nccm menu
#   will reappear. You are allowed to resize your window outside nccm and
#   the new window size will apply when nccm menu reappears after you exit
#   from your ssh session.
#   Supported values: true, false

nccm_config_preconnect_script: false
# ^ Path to a script that nccm will run prior to making a connection.
#   Supported values: false or any valid path
#   Be careful with this option - nccm has no control over what your
#   script can do.

nccm_config_postconnect_script: false
# ^ Path to a script that nccm will run after disconnecting from a connection.
#   Supported values: false or any valid path
#   Be careful with this option - nccm has no control over what your
#   script can do.

nccm_keybindings:
  # ^ nccm is configured for US keyboard mapping. If your regional settings
  #   or your terminal itself present different key mappings
  #   and certain keys don't behave as you'd expect - change their codes here.
  #   Each of the keyboard codes is a list, you can map a keypress to as many
  #   codes as you wish.
  #   If you want to figure out what code results from a keypress - run
  #   'nccm -d' , press a key and look for 'Keyboard entry: UserKey = nnn'
  #   in your logs.
  #   You can even map other keys to nccm keys - for example instead of F1 you
  #   want to use F12 - just put the code for F12 in the F1 key position.
  #   Supported values: list of one or more keyboard codes per item.
  #   Individual key bindings follow:
  nccm_key_tab:             # Tab key
    - 9
  nccm_key_space:           # Space bar
    - 32
  nccm_key_enter:           # Enter key
    - 10
    - 13
  nccm_key_backspace:       # Backspace key to delete one char backwards
    - 263
  nccm_key_ctrl_c:          # Ctrl-c (break - also quits nccm)
    - 3
  nccm_key_ctrl_d:          # Ctrl-d (exit - also quits nccm)
    - 4
  nccm_key_ctrl_h:          # Ctrl-h (for displaying help)
    - 8
  nccm_key_ctrl_k:          # Ctrl-k (toggle cursor mode)
    - 11
  nccm_key_ctrl_q:          # Ctrl-q (quits nccm)
    - 17
  nccm_key_ctrl_u:          # Ctrl-u (clears textbox text)
    - 21
  nccm_key_exc:             # ! key
    - 33
  nccm_key_at:              # @ key
    - 64
  nccm_key_hash:            # # key
    - 35
  nccm_key_dollar:          # $ key
    - 36
  nccm_key_percent:         # % key
    - 37
  nccm_key_shift_up:        # Shift up arrow
    - 337
  nccm_key_shift_down:      # Shift down arrow
    - 336
  nccm_key_shift_left:      # Shift left arrow
    - 393
  nccm_key_shift_right:     # Shift right arrow
    - 402
  nccm_key_up:              # Up arrow
    - 259
  nccm_key_down:            # Down arrow
    - 258
  nccm_key_left:            # Left arrow
    - 260
  nccm_key_right:           # Right arrow
    - 261
  nccm_key_pgup:            # Pgup key
    - 339
  nccm_key_pgdn:            # Pgdn key
    - 338
  nccm_key_home:            # Home key
    - 262
  nccm_key_end:             # End key
    - 360
  nccm_key_f1:              # F1 key
    - 265
  nccm_key_f2:              # F2 key
    - 266
  nccm_key_f3:              # F3 key
    - 267
  nccm_key_f4:              # F4 key
    - 268
  nccm_key_f5:              # F5 key
    - 269


# Connections configs:

Lab server:
  address: 10.2.2.2
  port: 11222         # Example of non-default port
  comment: this is another comment
  user: foo

# Here's a comment and empty lines are ignored

border router:                # Comments are allowed here
  comment: My border router   # And here
  address: 192.168.1.1        # And everywhere else
  user: admin                 # Settings order is not important
  # This comment is indented at the same level as the code
  keepalive: 40
  # ^ Override the default nccm_config_keepalive with this
  #   on a per-connection basis.
  identity: /home/user/mykey
  # ^ Override the default nccm_config_identity with this
  #   on a per-connection basis.
  customargs: -v -C -p 2222
  # ^ Your own custom args to ssh. Takes any legal argument to
  #   the ssh command so you can pretty much customize a connection
  #   in any way you desire. You can even use customargs instead of
  #   the nccm.yaml keys/values such as keepalive or identity.
  #   You can also supply a non-default port this way.

test server:
  address: test.example.com
  user: root
  sshprogram: /src/bin/ssh
  #   Can specify a custom ssh program
  #   Overrides the default ssh program setting on this connection only

root@10.10.1.1:

root@10.10.2.2:   # Note how nothing else is supplied...

user@example2.com:
  comment: Comment supplied, user/server extracted from FriendlyName

192.168.20.1:
  comment: Only server supplied. Read comment about where username comes from
  # If:  nccm_config_prompt_on_unknown_user: false  then currenly logged in
  #   username will be used
  # If:  nccm_config_prompt_on_unknown_user: true  then nccm will prompt the
  #   admin for the login username.

server.example.com:
# ^ Here nothing else is supplied, just the server name.
#   Again, the username is decided per:  nccm_config_prompt_on_unknown_user .


# The final line of yaml must have content if you want yamllint to pass clean.
# yamllint will complain if you leave empty lines at the bottom.
# nccm itself doesn't care if there are empty lines at the bottom.
